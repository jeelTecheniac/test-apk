name: Build Android APK

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allows manual trigger

jobs:
  build-android:
    runs-on: ubuntu-22.04 # Use Ubuntu 22.04 for immediate execution
    timeout-minutes: 90

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10" # Use Python 3.10 for Ubuntu 22.04 compatibility

      - name: Cache buildozer global directory
        uses: actions/cache@v3
        with:
          path: .buildozer_global
          key: buildozer-global-${{ hashFiles('buildozer.spec') }}

      - name: Cache buildozer directory
        uses: actions/cache@v3
        with:
          path: .buildozer
          key: buildozer-${{ hashFiles('buildozer.spec') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe -y
          sudo apt-get update

          # Install core build dependencies
          sudo apt-get install -y \
            git \
            zip \
            unzip \
            openjdk-8-jdk \
            python3-pip \
            autoconf \
            libtool \
            pkg-config \
            zlib1g-dev \
            libncurses5-dev \
            libncursesw5-dev \
            cmake \
            libffi-dev \
            libssl-dev \
            build-essential \
            wget \
            curl \
            libxml2-dev \
            libxslt-dev \
            libjpeg-dev \
            libpng-dev \
            libfreetype6-dev \
            libgif-dev \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libportmidi-dev \
            libswscale-dev \
            libavformat-dev \
            libavcodec-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-good1.0-dev \
            libunwind-dev \
            libgirepository1.0-dev \
            libcairo2-dev \
            pkg-config \
            python3-gi \
            python3-gi-cairo \
            libgirepository1.0-dev \
            libffi-dev \
            libssl-dev \
            autoconf \
            libtool \
            pkg-config \
            cmake \
            libasound2-dev \
            libpulse-dev \
            libudev-dev \
            libinput-dev \
            libts-dev \
            libx11-dev \
            libxext-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxi-dev \
            libxinerama-dev \
            libxxf86vm-dev \
            libxss-dev \
            libgl1-mesa-dev \
            mesa-common-dev \
            libgles2-mesa-dev \
            libegl1-mesa-dev \
            libglu1-mesa-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libxxf86vm-dev \
            libxss-dev
            
          # Ubuntu 22.04 specific fixes
          sudo apt-get install -y libtinfo6 || echo "libtinfo6 not available"
          sudo apt-get install -y libncurses6 || echo "libncurses6 not available"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel

          # Install specific versions for compatibility
          pip install cython==0.29.33
          pip install kivy==2.1.0
          pip install kivymd==1.1.1
          pip install pillow
          pip install requests

          # Install buildozer and python-for-android
          pip install buildozer==1.5.0
          # Use a valid, recent python-for-android release compatible with Buildozer
          pip install python-for-android==2024.1.21

          # Install additional build dependencies
          pip install --upgrade virtualenv
          pip install --upgrade six
          pip install --upgrade jinja2
          pip install --upgrade sh

      - name: Setup Android SDK
        run: |
          # Create Android SDK directory
          mkdir -p $HOME/.buildozer/android/platform
          cd $HOME/.buildozer/android/platform

          # Download and setup Android SDK
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
          unzip -q commandlinetools-linux-8512546_latest.zip
          mkdir -p android-sdk/cmdline-tools
          mv cmdline-tools android-sdk/cmdline-tools/latest

          # Create the old tools directory structure that Buildozer expects
          mkdir -p android-sdk/tools/bin
          ln -sf $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager $HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager

          # Set environment variables
          export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools

          # Accept licenses
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

          # Install required SDK packages
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30" "build-tools;30.0.3" "ndk;21.4.7075529"

          # Verify installation
          ls -la $ANDROID_HOME/build-tools/
          ls -la $ANDROID_HOME/platform-tools/
          ls -la $ANDROID_HOME/tools/bin/

      - name: Configure environment
        run: |
          # Set environment variables
          export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3
          export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
          export PYTHONPATH=$PYTHONPATH:$HOME/.local/lib/python3.10/site-packages
          export PATH=$PATH:$HOME/.local/bin

          # Verify environment
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"
          echo "PYTHONPATH: $PYTHONPATH"

          # Test key tools
          java -version
          javac -version
          python --version
          buildozer --version

      - name: Initialize Buildozer
        run: |
          # Set environment variables
          export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3
          export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
          export PYTHONPATH=$PYTHONPATH:$HOME/.local/lib/python3.10/site-packages
          export PATH=$PATH:$HOME/.local/bin

          # Initialize buildozer
          buildozer init || echo "Buildozer already initialized"

          # Create .buildozer directory if it doesn't exist
          mkdir -p .buildozer

          # Set proper permissions
          chmod -R 755 .buildozer || echo "Permission setting failed"

      - name: Build with Buildozer
        run: |
          # Set environment variables for the build
          export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3
          export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
          export PYTHONPATH=$PYTHONPATH:$HOME/.local/lib/python3.10/site-packages
          export PATH=$PATH:$HOME/.local/bin

          # Clean previous builds if they exist
          buildozer android clean || echo "No previous builds to clean"

          # Build the APK with verbose output
          buildozer android debug -v
        env:
          JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
          ANDROID_HOME: $HOME/.buildozer/android/platform/android-sdk

      - name: Collect APKs
        run: |
          mkdir -p bin
          echo "Searching for APKs..."
          find . -type f -name "*.apk" -print || true
          # Common Buildozer output locations
          for d in \
            .buildozer/android/platform/build-*/dists/*/bin \
            .buildozer/android/platform/build-*/dists/*/build/outputs/apk/debug \
            .buildozer/android/platform/build-*/dists/*/build/outputs/apk/release \
            bin
          do
            if [ -d "$d" ]; then
              cp -v "$d"/*.apk bin/ 2>/dev/null || true
            fi
          done
          echo "Final APKs in bin/:"
          ls -la bin/ || true

      - name: List build artifacts
        run: |
          ls -la bin/ || echo "No bin directory found"
          find . -name "*.apk" -type f || echo "No APK files found"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: bin/*.apk
        if: hashFiles('bin/*.apk') != ''

      - name: Create Release (if tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: bin/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
